{"ast":null,"code":"var _jsxFileName = \"/Users/jee/Desktop/j_project/emotiondiary/src/pages/Edit.js\",\n  _s = $RefreshSig$();\nimport { useState, useContext, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { DiaryStateContext } from \"../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Edit = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams(); //id꺼내주기\n  const diaryList = useContext(DiaryStateContext);\n  const [originData, setOriginData] = useState();\n\n  //id나 리스트가 변할 때만 컨텐츠 불러오기\n  useEffect(() => {\n    if (diaryList.length >= 1) {\n      const targetDiary = diaryList.find(it => parseInt(it.id) === parseInt(id)); //it.id는 아이템의 아이디 id는 useParams으로 가져온것\n      if (targetDiary) {\n        setOriginData(targetDiary);\n      } else {\n        //undefined나 리스트 없는 숫자가 주소창에 붙을 경우\n        navigate('/', {\n          replace: true\n        }); //뒤로도 못가게\n      }\n    }\n  }, [diaryList, id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n//<DiaryEditor />\n_s(Edit, \"l8P02dfOmBZ4zkQPyFxMwlgJn90=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = Edit;\nexport default Edit;\nvar _c;\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"names":["useState","useContext","useEffect","useNavigate","useParams","DiaryStateContext","Edit","navigate","id","diaryList","originData","setOriginData","length","targetDiary","find","it","parseInt","replace"],"sources":["/Users/jee/Desktop/j_project/emotiondiary/src/pages/Edit.js"],"sourcesContent":["import { useState, useContext, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { DiaryStateContext } from \"../App\";\n\nconst Edit = () => {\n    const navigate = useNavigate();\n    const {id} = useParams(); //id꺼내주기\n    const diaryList = useContext(DiaryStateContext);\n    const [originData, setOriginData] = useState();\n\n    //id나 리스트가 변할 때만 컨텐츠 불러오기\n    useEffect(()=>{\n        if(diaryList.length >= 1){\n            const targetDiary = diaryList.find(\n                (it) => parseInt(it.id) === parseInt(id)\n            ); //it.id는 아이템의 아이디 id는 useParams으로 가져온것\n            if(targetDiary){\n                setOriginData(targetDiary);\n            }else{ //undefined나 리스트 없는 숫자가 주소창에 붙을 경우\n                navigate('/', {replace:true}) //뒤로도 못가게\n            }\n        }\n    },[diaryList, id])\n\n    return(\n        <div>\n            \n        </div>\n    );\n};\n//<DiaryEditor />\nexport default Edit;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACvD,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,iBAAiB,QAAQ,QAAQ;AAAC;AAE3C,MAAMC,IAAI,GAAG,MAAM;EAAA;EACf,MAAMC,QAAQ,GAAGJ,WAAW,EAAE;EAC9B,MAAM;IAACK;EAAE,CAAC,GAAGJ,SAAS,EAAE,CAAC,CAAC;EAC1B,MAAMK,SAAS,GAAGR,UAAU,CAACI,iBAAiB,CAAC;EAC/C,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,EAAE;;EAE9C;EACAE,SAAS,CAAC,MAAI;IACV,IAAGO,SAAS,CAACG,MAAM,IAAI,CAAC,EAAC;MACrB,MAAMC,WAAW,GAAGJ,SAAS,CAACK,IAAI,CAC7BC,EAAE,IAAKC,QAAQ,CAACD,EAAE,CAACP,EAAE,CAAC,KAAKQ,QAAQ,CAACR,EAAE,CAAC,CAC3C,CAAC,CAAC;MACH,IAAGK,WAAW,EAAC;QACXF,aAAa,CAACE,WAAW,CAAC;MAC9B,CAAC,MAAI;QAAE;QACHN,QAAQ,CAAC,GAAG,EAAE;UAACU,OAAO,EAAC;QAAI,CAAC,CAAC,EAAC;MAClC;IACJ;EACJ,CAAC,EAAC,CAACR,SAAS,EAAED,EAAE,CAAC,CAAC;EAElB,oBACI;IAAA;IAAA;IAAA;EAAA,QAEM;AAEd,CAAC;AACD;AAAA,GA1BMF,IAAI;EAAA,QACWH,WAAW,EACfC,SAAS;AAAA;AAAA,KAFpBE,IAAI;AA2BV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}