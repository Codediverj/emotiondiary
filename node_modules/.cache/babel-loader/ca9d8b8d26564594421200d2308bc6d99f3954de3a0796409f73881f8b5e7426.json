{"ast":null,"code":"var _jsxFileName = \"/Users/jee/Desktop/j_project/emotiondiary/src/components/DiaryEditor.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useContext, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DiaryDispatchContext } from \"./../App\";\nimport MyHeader from \"./MyHeader\";\nimport MyButton from \"./MyButton\";\nimport EmotionItem from \"./EmotionItem\";\n\n//Q1. '오늘'의 날짜를 초기값으로 넣어주기 위해서 \n//Q2. 감정처리\n//util 폴더로 별도 분리됨.\nimport { getStringDate } from \"../util/date\";\nimport { emotionList } from \"../util/emotion\";\n\n//Edit.js에서 isEdit, originData값 보내줌\n//isEdit은 새로운 일기가 아니라 기존 있는 데이터 넘겨줄때만 true = edit시에만\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiaryEditor = _ref => {\n  _s();\n  let {\n    isEdit,\n    originData\n  } = _ref;\n  //1.작성날짜 지정\n  const [date, setDate] = useState(getStringDate(new Date()));\n  const navigate = useNavigate();\n\n  //2.선택 감정 저장\n  const [emotion, setEmotion] = useState(3);\n  //클릭한 감정을 prop으로 전달\n  //EmotionItem에 onClick으로 받아온 id를 가져와\n  //현재 상대로 바꿔줌.\n  const handleClickEmote = useCallback(emotion => {\n    setEmotion(emotion);\n  }, []);\n\n  //3.작성폼\n  //작성하는 내용 바로 반영해주기\n  const [content, setContent] = useState(\"\");\n  //빈칸이면 포커스 가도록\n  const contentRef = useRef();\n  //4. 저장\n  const {\n    onCreate,\n    onEdit,\n    onRemove\n  } = useContext(DiaryDispatchContext);\n  const handleSubmit = () => {\n    if (content.length < 1) {\n      contentRef.current.focus();\n      return;\n    }\n    if (window.confirm(isEdit ? \"Do you want to edit this diary?\" : \"Do you want to write new diary?\")) {\n      if (!isEdit) {\n        onCreate(date, content, emotion); //생성하고\n        const dateGetTime = new Date(date).getTime();\n        console.log(\"생성된 date: \" + date + \"/ getTime()으로 변환된 값:\" + dateGetTime + \"/ 그값을 다시 getStringDate으로 받으면: \" + getStringDate(new Date(dateGetTime)));\n      } else {\n        onEdit(originData.id, date, content, emotion);\n        const dateGetTime = new Date(date).getTime();\n        console.log(\"편집된 date: \" + date + \"/ getTime()으로 변환된 값:\" + dateGetTime + \"/ 그값을 다시 getStringDate으로 받으면: \" + getStringDate(new Date(dateGetTime)));\n      }\n    }\n    navigate('/', {\n      replace: true\n    }); //뒤로가고 못돌아오게\n  };\n\n  const handleRemove = () => {\n    if (window.confirm(\"Do you want to delete?\")) {\n      onRemove(originData.id);\n      navigate(\"/\", {\n        replace: true\n      });\n    }\n  };\n  useEffect(() => {\n    if (isEdit) {\n      //수정시점으로 날짜 돌려주기\n      setDate(getStringDate(new Date(parseInt(originData.date))));\n      setEmotion(originData.emotion);\n      setContent(originData.content);\n    }\n  }, [isEdit, originData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(MyHeader, {\n      headText: isEdit ? \"Edit your diary\" : \"Write new diary\",\n      leftchild: /*#__PURE__*/_jsxDEV(MyButton, {\n        text: \"Back\",\n        onClick: () => navigate(-1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this),\n      rightchild: isEdit && /*#__PURE__*/_jsxDEV(MyButton, {\n        text: \"Delete\",\n        type: \"negative\",\n        onClick: handleRemove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DiaryEditor\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"What is the date today?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input_box\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input_date\",\n            value: date,\n            type: \"date\",\n            onChange: e => setDate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Today's feeling\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input_box emotion_list_wrapper\",\n          children: emotionList.map(it => /*#__PURE__*/_jsxDEV(EmotionItem, {\n            ...it,\n            onClick: handleClickEmote,\n            isSelected: it.emotion_id === emotion\n          }, it.emotion_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Today's Diary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input_box text_wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"How was your day?\",\n            ref: contentRef,\n            value: content,\n            onChange: e => setContent(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control_box\",\n          children: [/*#__PURE__*/_jsxDEV(MyButton, {\n            text: 'Cancel',\n            onClick: () => navigate(-1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n            text: 'Save',\n            type: 'positive',\n            onClick: handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(DiaryEditor, \"vHNPQINZo2ZkaNrfezxNl2hNQfc=\", false, function () {\n  return [useNavigate];\n});\n_c = DiaryEditor;\nexport default DiaryEditor;\nvar _c;\n$RefreshReg$(_c, \"DiaryEditor\");","map":{"version":3,"names":["useState","useRef","useContext","useEffect","useNavigate","DiaryDispatchContext","MyHeader","MyButton","EmotionItem","getStringDate","emotionList","DiaryEditor","isEdit","originData","date","setDate","Date","navigate","emotion","setEmotion","handleClickEmote","useCallback","content","setContent","contentRef","onCreate","onEdit","onRemove","handleSubmit","length","current","focus","window","confirm","dateGetTime","getTime","console","log","id","replace","handleRemove","parseInt","e","target","value","map","it","emotion_id"],"sources":["/Users/jee/Desktop/j_project/emotiondiary/src/components/DiaryEditor.js"],"sourcesContent":["import { useState, useRef, useContext, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DiaryDispatchContext } from \"./../App\"\n\nimport MyHeader from \"./MyHeader\";\nimport MyButton from \"./MyButton\";\nimport EmotionItem from \"./EmotionItem\";\n\n//Q1. '오늘'의 날짜를 초기값으로 넣어주기 위해서 \n//Q2. 감정처리\n//util 폴더로 별도 분리됨.\nimport {getStringDate} from \"../util/date\";\nimport {emotionList} from \"../util/emotion\";\n\n//Edit.js에서 isEdit, originData값 보내줌\n//isEdit은 새로운 일기가 아니라 기존 있는 데이터 넘겨줄때만 true = edit시에만\nconst DiaryEditor = ({isEdit, originData}) => {\n    \n    //1.작성날짜 지정\n    const [date, setDate] = useState(getStringDate(new Date()));\n    const navigate = useNavigate();\n\n    //2.선택 감정 저장\n    const [emotion, setEmotion] = useState(3);\n    //클릭한 감정을 prop으로 전달\n    //EmotionItem에 onClick으로 받아온 id를 가져와\n    //현재 상대로 바꿔줌.\n    const handleClickEmote = useCallback((emotion) => {\n        setEmotion(emotion);\n      }, []);\n\n    //3.작성폼\n    //작성하는 내용 바로 반영해주기\n    const [content, setContent] = useState(\"\");\n    //빈칸이면 포커스 가도록\n    const contentRef = useRef();  \n    //4. 저장\n    const {onCreate, onEdit, onRemove} = useContext(DiaryDispatchContext);\n    const handleSubmit = () => {\n        if(content.length < 1){\n            contentRef.current.focus();\n            return;\n        }\n        if(\n            window.confirm(\n                isEdit ? \"Do you want to edit this diary?\" : \"Do you want to write new diary?\"\n                )\n            ){\n                if(!isEdit) {\n                    onCreate(date,content,emotion); //생성하고\n                    const dateGetTime = new Date(date).getTime();\n                    console.log(\"생성된 date: \"+date+\"/ getTime()으로 변환된 값:\" + dateGetTime + \"/ 그값을 다시 getStringDate으로 받으면: \"+ getStringDate(new Date(dateGetTime)) );\n                }else{\n                    onEdit(originData.id, date, content, emotion);\n                    const dateGetTime = new Date(date).getTime();\n                    console.log(\"편집된 date: \"+date+\"/ getTime()으로 변환된 값:\" + dateGetTime + \"/ 그값을 다시 getStringDate으로 받으면: \"+ getStringDate(new Date(dateGetTime)) );\n                }\n            }\n            navigate('/', {replace:true}); //뒤로가고 못돌아오게\n    };\n\n    const handleRemove = () => {\n        if (window.confirm(\"Do you want to delete?\")) {\n          onRemove(originData.id);\n          navigate(\"/\", { replace: true });\n        }\n    };\n\n    useEffect(() => {\n        if(isEdit){\n            //수정시점으로 날짜 돌려주기\n            setDate(getStringDate(new Date(parseInt(originData.date))));\n            setEmotion(originData.emotion);\n            setContent(originData.content);\n        }\n    }, [isEdit, originData])\n\n    return(\n        <div className=\"\">\n            {/* Header */}\n            <MyHeader \n            headText={isEdit ? \"Edit your diary\" : \"Write new diary\"}\n            leftchild={\n                <MyButton \n                text={\"Back\"}\n                onClick={() => navigate(-1)}\n                />\n                }\n            rightchild={ isEdit &&\n                <MyButton \n                text={\"Delete\"}\n                type={\"negative\"}\n                onClick={handleRemove}\n                />\n            }    \n            />\n            <div className=\"DiaryEditor\">\n                {/* Q1 */}\n                <section>\n                    <h4>What is the date today?</h4>\n                    <div className=\"input_box\">\n                        <input \n                        className=\"input_date\"\n                        value={date} \n                        type=\"date\" \n                        onChange={(e)=>setDate(e.target.value)}\n                        />\n                    </div>\n                </section>\n                {/* Q2 */}\n                <section>\n                    <h4>Today's feeling</h4>\n                    <div className=\"input_box emotion_list_wrapper\">\n                        {emotionList.map((it) => (\n                            <EmotionItem \n                            key={it.emotion_id} {...it} \n                            onClick={handleClickEmote}\n                            isSelected={it.emotion_id === emotion}\n                            />\n                        ))}\n                    </div>\n                </section>\n                {/* Q3 */}\n                <section>\n                    <h4>Today's Diary</h4>\n                    <div className=\"input_box text_wrapper\">\n                        <textarea \n                        placeholder=\"How was your day?\"\n                        ref={contentRef} value={content}\n                        onChange={(e) => setContent(e.target.value)}/>\n                    </div>\n                </section>\n                {/* Q4 */}\n                <section>\n                    <div className=\"control_box\">\n                        <MyButton text={'Cancel'} \n                        onClick={()=>navigate(-1)}/>\n                        <MyButton text={'Save'} \n                        type={'positive'} onClick={handleSubmit}/>\n                    </div>\n                </section>\n            </div>\n        </div>\n    );\n}\n\nexport default DiaryEditor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}